package by.tms.model.task6.model;

import java.util.*;

//     * 6) Пишем библиотеку.
//             * ==Для каждой книги библиотечного фонда известны автор, название и год издания.
//             * ==Для читателя библиотеки будем хранить ФИО и электронный адрес. Каждый читатель может взять в библиотеке одну или несколько книг.
//             * ==Ещё нам понадобится флаг читательского согласия на уведомления по электронной почте.
//             * Рассылки организуют сотрудники библиотеки: напоминают о сроке возврата книг, сообщают новости.
//             * Создаем классы:
//             *++  - Book с полями Автор, Название, Год издания
//             *++  - Reader(читатель) с полями ФИО, электронный адрес, флаг согласия на рассылку, список взятых книг
//             *++  - EmailAddress  с полями электронный адрес, дополнительная информация
//             *  - Library содержит список книг и список читателей.
//             *
//             *  Задачи:
//             *  a) Получить список всех книг библиотеки, отсортированных по году издания.
//             *  b) Требуется создать список рассылки (объекты типа EmailAddress) из адресов всех читателей библиотеки.
//             *      При этом флаг согласия на рассылку учитывать не будем: библиотека закрывается, так что хотим оповестить всех.
//             *  c) Снова нужно получить список рассылки. Но на этот раз включаем в него только адреса читателей, которые согласились на рассылку.
//             *      Дополнительно нужно проверить, что читатель взял из библиотеки больше одной книги.
//             *  d) Получить список всех книг, взятых читателями.
//             *      Список не должен содержать дубликатов (книг одного автора, с одинаковым названием и годом издания).
//             *  e) Проверить, взял ли кто-то из читателей библиотеки какие-нибудь книги Пушкина Александра Сергеевича.
//             *
//             *  Задачи со ЗВЕЗДОЧКОЙ:
//             *  а) Узнать наибольшее число книг, которое сейчас на руках у читателя.
//             *  b) Необходимо рассылать разные тексты двум группам:
//             *      * тем, у кого взято меньше двух книг, просто расскажем о новинках библиотеки;
//             *      * тем, у кого две книги и больше, напомним о том, что их нужно вернуть в срок.
//             *      То есть надо написать метод, который вернёт два списка адресов (типа EmailAddress): с пометкой OK — если книг не больше двух,
//             *      или TOO_MUCH — если их две и больше. Порядок групп не важен.
//             *  с) Для каждой группы (OK, TOO_MUCH) получить списки читателей в каждой группе.
//             *  d) Для каждой группы (OK, TOO_MUCH) получить ФИО читателей в каждой группе, перечисленные через запятую.
//             *      И ещё каждый такой список ФИО нужно обернуть фигурными скобками.
//             *      Пример: TOO_MUCH {Иванов Иван Иванович, Васильев Василий Васильевич}
//             *              OK {Семёнов Семён Семёнович}
//             *
public class Main {
    public static void main(String[] args) {
        Library library = new Library();
        library.getBooks().add(new Book("Лев Толстой", "Смерть Ивана Ильича", 1886))
        library.getBooks().add(new Book("Фёдор Михайлович Достоевский", "Преступление и наказание", 1886));
        library.getBooks().add(new Book("Чарлз Диккенс", "Повесть о двух городах", 1859));
        library.getBooks().add(new Book("Чарлз Диккенс", "Оливер Твист", 1839));
        library.getBooks().add(new Book("Антон Павлович Чехов", "Вишнёвый сад", 1901));
        library.getBooks().add(new Book("Антон Павлович Чехов", "Попрыгунья", 1891));
        library.getBooks().add(new Book("Виктор Гюго", "Человек, который смеётся", 1860));
        library.getBooks().add(new Book("Виктор Гюго", "Собор Парижской Богоматери", 1831));
        library.getBooks().add(new Book("Эрнест Хемингуэй", "По ком звонит колокол", 1940));
        library.getBooks().add(new Book("Эрнест Хемингуэй", "Снега Килиманджаро", 1936));
        library.getBooks().add(new Book("Александр Сергеевич Пушкин", "Медный всадник", 1833));
        Reader reader1 = new Reader("Русакович Виктор Геннадьевич", "vitek.rus@mail.ru", true);
        Reader reader2 = new Reader("Иванов Иван Иванович", "werr@gmail.com", false);
        Reader reader3 = new Reader("Владимир Владимирович Уткин", "vi.rus@tut.by", true);
        reader1.setBooks(Arrays.asList("Эрнест Хемингуэй", "По ком звонит колокол", 1940));
        library.getReaders().add(reader1);
        //один хер я сдохну и не пойму как создавать и наполнять списки

//             *  a) Получить список всех книг библиотеки, отсортированных по году издания.
        List<Book> books = library.getBooks().stream()
                .sorted(Comparator.comparing(Book::getYearOfPublishing)).
                toList();
//             *  b) Требуется создать список рассылки (объекты типа EmailAddress) из адресов всех читателей библиотеки.
//             *      При этом флаг согласия на рассылку учитывать не будем: библиотека закрывается, так что хотим оповестить всех.
        List<EmailAddress> emailAddresses = library.getReaders().stream()
                .map(Reader::getEmail)
                .filter(Objects::nonNull)
                .map(EmailAddress::new)
                .toList();
//             *  c) Снова нужно получить список рассылки. Но на этот раз включаем в него только адреса читателей, которые согласились на рассылку.
//             *      Дополнительно нужно проверить, что читатель взял из библиотеки больше одной книги.

            List<EmailAddress> addresses = new ArrayList<>();
            for (Reader reader : library.getReaders()) {
                if (reader.getBooks().size() > 1 && reader.isSubscriber())
                    addresses.add(new EmailAddress(reader.getEmail()));
            }
//             *  d) Получить список всех книг, взятых читателями.
//             *      Список не должен содержать дубликатов (книг одного автора, с одинаковым названием и годом издания).
            Set<Book> result = new LinkedHashSet<>();
            for (Reader reader : library.getReaders()) {
                result.addAll(reader.getBooks());
            }
            List<Book> bookList = library.getReaders().stream()
                    .flatMap(reader -> reader.getBooks().stream())
                    .distinct()
                    .toList();
//             *  e) Проверить, взял ли кто-то из читателей библиотеки какие-нибудь книги Пушкина Александра Сергеевича.
        checkAuthorBooks(library);
        boolean match = library.getReaders().stream()
                .flatMap(reader -> reader.getBooks().stream())
                .anyMatch(book -> "Пушкин".equals(book.getAuthor()));


    }

    private static boolean checkAuthorBooks(Library library) {
        boolean result = false;
        for (Reader reader : library.getReaders()) {
            for (Book book : reader.getBooks()) {
                if ("Пушкин".equals(book.getAuthor())) {
                    return true;
                }
            }
        }
        return result;
    }

}

